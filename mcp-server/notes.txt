PSYCHOLOGY NOTE #1: The Dunning-Kruger effect describes how people with limited knowledge in a domain tend to overestimate their expertise, while experts often underestimate their abilities relative to others.
PSYCHOLOGY NOTE #2: Flow state, identified by psychologist Mihaly Csikszentmihalyi, is a mental state of complete absorption and enjoyment in an activity, often experienced when the challenge level perfectly matches skill level.
MOTIVATION NOTE #1: According to Self-Determination Theory, intrinsic motivation (doing something because it's inherently rewarding) is typically more sustainable than extrinsic motivation (driven by external rewards or pressure).
CODING NOTE #1: The principle of "Don't Repeat Yourself" (DRY) encourages developers to reduce repetition by abstracting common functionality into reusable modules or functions.
PSYCHOLOGY NOTE #3: Cognitive biases are systematic patterns of deviation from norm or rationality in judgment. Examples include confirmation bias (seeking information that confirms existing beliefs) and availability heuristic (overestimating the likelihood of events that come readily to mind).
MOTIVATION NOTE #2: "Implementation intentions" involve creating specific if-then plans for when, where, and how you'll take action toward a goal. Research shows they significantly increase goal achievement rates.
CODING NOTE #2: The "rubber duck debugging" technique involves explaining your code line-by-line to an inanimate object (traditionally a rubber duck). This forces you to articulate your logic carefully, often helping you spot errors in your reasoning.
PSYCHOLOGY NOTE #4: The spacing effect demonstrates that learning is more effective when study sessions are spaced out over time rather than crammed into a single session, even if the total study time is identical.
MOTIVATION NOTE #3: The "progress principle" discovered by Harvard researcher Teresa Amabile shows that making consistent small wins toward meaningful goals is the most powerful motivator in professional work.
CODING NOTE #3: The "20-minute rule" suggests that when stuck on a coding problem, spend 20 minutes trying to solve it yourself before seeking help. This balances the learning benefits of struggling with a problem against the efficiency of getting assistance.
